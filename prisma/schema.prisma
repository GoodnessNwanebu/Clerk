generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String        @id @default(cuid())
  email            String        @unique
  country          String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  name             String?
  image            String?
  emailVerified    DateTime?
  pwaInstallSource String?
  pwaInstalledAt   DateTime?
  accounts         Account[]
  caseSessions     CaseSession[]
  cases            Case[]
  sessions         Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model CaseSession {
  id        String   @id @default(cuid())
  caseId    String
  userId    String
  sessionId String   @unique
  isActive  Boolean  @default(true)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  case      Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("case_sessions")
}

model Department {
  id             String         @id @default(cuid())
  name           String         @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  cases          Case[]
  subspecialties Subspecialty[]

  @@map("departments")
}

model Subspecialty {
  id           String     @id @default(cuid())
  name         String
  departmentId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@unique([name, departmentId])
  @@map("subspecialties")
}

model PatientProfile {
  id                String             @id @default(cuid())
  educationLevel    String
  healthLiteracy    String
  occupation        String
  recordKeeping     String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  cases             Case[]
  pediatricProfiles PediatricProfile[]

  @@map("patient_profiles")
}

model PediatricProfile {
  id                 String         @id @default(cuid())
  patientAge         Int
  ageGroup           String
  respondingParent   String
  developmentalStage String
  communicationLevel String
  parentProfileId    String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  cases              Case[]
  parentProfile      PatientProfile @relation(fields: [parentProfileId], references: [id], onDelete: Cascade)

  @@map("pediatric_profiles")
}

model Case {
  id                      String                @id @default(cuid())
  diagnosis               String
  primaryInfo             String
  openingLine             String
  isPediatric             Boolean               @default(false)
  difficultyLevel         String                @default("standard")
  location                String?
  isSurgical              Boolean               @default(false)
  pathophysiologyCategory String?
  userId                  String
  departmentId            String
  patientProfileId        String?
  pediatricProfileId      String?
  preliminaryDiagnosis    String?
  examinationPlan         String?
  investigationPlan       String?
  finalDiagnosis          String?
  managementPlan          String?
  sessionId               String?               @unique
  isVisible               Boolean               @default(true)
  startedAt               DateTime              @default(now())
  completedAt             DateTime?
  isCompleted             Boolean               @default(false)
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  isPractice              Boolean               @default(false)
  caseReport              CaseReport?
  caseSessions            CaseSession[]
  department              Department            @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  patientProfile          PatientProfile?       @relation(fields: [patientProfileId], references: [id])
  pediatricProfile        PediatricProfile?     @relation(fields: [pediatricProfileId], references: [id])
  user                    User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  examinationResults      ExaminationResult[]
  feedback                Feedback?
  investigationResults    InvestigationResult[]
  messages                Message[]

  @@map("cases")
}

model Message {
  id           String   @id @default(cuid())
  sender       String
  text         String
  speakerLabel String?
  timestamp    DateTime @default(now())
  caseId       String
  case         Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model ExaminationResult {
  id             String   @id @default(cuid())
  name           String
  type           String
  category       String
  urgency        String
  value          Float?
  unit           String?
  rangeLow       Float?
  rangeHigh      Float?
  status         String?
  findings       String?
  impression     String?
  recommendation String?
  abnormalFlags  String[]
  reportType     String?
  caseId         String
  case           Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("examination_results")
}

model InvestigationResult {
  id             String   @id @default(cuid())
  name           String
  type           String
  category       String
  urgency        String
  value          Float?
  unit           String?
  rangeLow       Float?
  rangeHigh      Float?
  status         String?
  findings       String?
  impression     String?
  recommendation String?
  abnormalFlags  String[]
  reportType     String?
  caseId         String
  case           Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("investigation_results")
}

model Feedback {
  id                  String   @id @default(cuid())
  diagnosis           String
  keyLearningPoint    String
  whatYouDidWell      String[]
  whatCouldBeImproved String[]
  clinicalTip         String
  missedOpportunities Json?
  clinicalPearls      String[]
  caseId              String   @unique
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  clinicalReasoning   String?
  case                Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("feedback")
}

model CaseReport {
  id             String   @id @default(cuid())
  caseId         String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  assessment     Json
  examination    Json
  investigations Json
  isVisible      Boolean  @default(true)
  learningPoints String[]
  management     Json
  patientInfo    Json
  history        Json?
  case           Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("case_reports")
}
